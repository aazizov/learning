1
00:00:06,690 --> 00:00:09,600
- In this video, I will
tell you about links.

2
00:00:09,600 --> 00:00:13,350
A link is a pointer to a
file in a different location.

3
00:00:13,350 --> 00:00:15,090
You can compare it a bit to shortcuts

4
00:00:15,090 --> 00:00:17,370
on other operating systems.

5
00:00:17,370 --> 00:00:18,630
Links can be very useful

6
00:00:18,630 --> 00:00:22,410
to make the same file available
on multiple locations.

7
00:00:22,410 --> 00:00:24,030
And Linux uses hard links,

8
00:00:24,030 --> 00:00:25,710
as well as symbolic links.

9
00:00:25,710 --> 00:00:29,460
Sometimes the symbolic links
are also called soft links.

10
00:00:29,460 --> 00:00:30,480
But that's incorrect.

11
00:00:30,480 --> 00:00:33,030
You should call them symbolic links.

12
00:00:33,030 --> 00:00:35,340
You can create hard
links with the ln command

13
00:00:35,340 --> 00:00:38,760
and symbolic links with the ln -s command.

14
00:00:38,760 --> 00:00:41,220
Before I'm going to show
you how to create them,

15
00:00:41,220 --> 00:00:42,780
I'd first like to show you

16
00:00:42,780 --> 00:00:45,240
how exactly these links are organized.

17
00:00:45,240 --> 00:00:46,890
So let me make a drawing for you.

18
00:00:48,871 --> 00:00:52,710
All right, let me explain
how links are organized.

19
00:00:52,710 --> 00:00:55,161
It all starts with the inode.

20
00:00:55,161 --> 00:00:58,170
The inode is the
administration of your files.

21
00:00:58,170 --> 00:00:59,370
And from the inode,

22
00:00:59,370 --> 00:01:01,260
you would go to the blocks.

23
00:01:01,260 --> 00:01:03,630
That is the actual location on disk

24
00:01:03,630 --> 00:01:05,820
where your files are stored.

25
00:01:05,820 --> 00:01:07,980
Now, in order to access these inodes,

26
00:01:07,980 --> 00:01:10,980
you assign a name to these inodes.

27
00:01:10,980 --> 00:01:13,500
And the fact is that a link

28
00:01:13,500 --> 00:01:16,683
or a hard link is a
name, not more than that.

29
00:01:17,670 --> 00:01:19,890
The thing is that you
can have one hard link.

30
00:01:19,890 --> 00:01:22,173
You can also have multiple hard links.

31
00:01:23,040 --> 00:01:24,720
And if you have multiple hard links,

32
00:01:24,720 --> 00:01:26,460
well, there are just multiple names

33
00:01:26,460 --> 00:01:28,620
that are all at the same level.

34
00:01:28,620 --> 00:01:30,750
There's no difference
between the first name,

35
00:01:30,750 --> 00:01:32,276
the second name that you create.

36
00:01:32,276 --> 00:01:34,500
It's just the same.

37
00:01:34,500 --> 00:01:36,687
Now, there's also symbolic links

38
00:01:36,687 --> 00:01:38,970
and the difference is
that the hard link points

39
00:01:38,970 --> 00:01:40,500
to the inode directly.

40
00:01:40,500 --> 00:01:42,903
The symbolic link points to a hard link.

41
00:01:45,330 --> 00:01:47,070
And that explains very well

42
00:01:47,070 --> 00:01:48,360
what a dependency is.

43
00:01:48,360 --> 00:01:52,260
So you can have multiple
symbolic link to a hard link

44
00:01:52,260 --> 00:01:55,717
but if you have multiple symbolic links

45
00:01:55,717 --> 00:01:58,590
but if you have a symbolic link

46
00:01:58,590 --> 00:02:01,620
and the original name is removed,

47
00:02:01,620 --> 00:02:04,980
then the symbolic link becomes invalid.

48
00:02:04,980 --> 00:02:07,710
Now, symbolic links do
add some flexibility

49
00:02:07,710 --> 00:02:09,753
but this is really something to realize.

50
00:02:12,150 --> 00:02:14,910
Before I'm going to show you
how to create these links,

51
00:02:14,910 --> 00:02:18,660
I'm gonna show you how I'm
using them myself on my MacBook.

52
00:02:18,660 --> 00:02:21,540
MacBook, that's not
Linux. Yes, that's right.

53
00:02:21,540 --> 00:02:24,780
But macOS is a kind of Unix

54
00:02:24,780 --> 00:02:26,850
and Unix is very familiar to Linux

55
00:02:26,850 --> 00:02:29,580
and that is why on macOS,

56
00:02:29,580 --> 00:02:31,320
sometimes you will find things

57
00:02:31,320 --> 00:02:34,230
that work exactly the same on Linux.

58
00:02:34,230 --> 00:02:37,860
So I have a directory,
my GitHub directory.

59
00:02:37,860 --> 00:02:39,510
And in my GitHub directory,

60
00:02:39,510 --> 00:02:43,020
I'm keeping projects for
all of my different courses.

61
00:02:43,020 --> 00:02:45,540
Now, there is one file
that's a little bit special.

62
00:02:45,540 --> 00:02:46,373
Let me show you.

63
00:02:46,373 --> 00:02:50,460
Find . -name kube-setup

64
00:02:55,267 --> 00:02:56,910
.sh.

65
00:02:56,910 --> 00:02:59,820
That's a file that I'm
using in different courses

66
00:02:59,820 --> 00:03:03,150
to help people set up
Kubernetes in an easy way.

67
00:03:03,150 --> 00:03:06,660
As you can see, we find it six times here.

68
00:03:06,660 --> 00:03:08,610
Now, the thing is that
I'm keeping this file

69
00:03:08,610 --> 00:03:10,740
for a rapidly changing environment

70
00:03:10,740 --> 00:03:12,480
and it does happen a lot

71
00:03:12,480 --> 00:03:14,790
that I need to apply changes to the file.

72
00:03:14,790 --> 00:03:15,630
Now, what do you think?

73
00:03:15,630 --> 00:03:18,030
If I am going to change
one of these files,

74
00:03:18,030 --> 00:03:19,200
how am I going to make sure

75
00:03:19,200 --> 00:03:20,760
that all of the other files

76
00:03:20,760 --> 00:03:23,640
that should have the exact same contents

77
00:03:23,640 --> 00:03:25,740
do have the exact same contents?

78
00:03:25,740 --> 00:03:28,830
Now, that is where a
hard link comes in handy.

79
00:03:28,830 --> 00:03:30,450
So I've created one file.

80
00:03:30,450 --> 00:03:32,910
I've created hard links
for everything else

81
00:03:32,910 --> 00:03:35,250
and that means that if I modify,

82
00:03:35,250 --> 00:03:36,750
no matter which one,

83
00:03:36,750 --> 00:03:40,020
all of them are going
to change accordingly.

84
00:03:40,020 --> 00:03:42,690
And that is how hard links can be useful.

85
00:03:42,690 --> 00:03:45,000
Now that you can see
how I'm using hard links

86
00:03:45,000 --> 00:03:46,800
in my own daily practice,

87
00:03:46,800 --> 00:03:47,637
let's get back to Linux

88
00:03:47,637 --> 00:03:50,130
and let me show you how
to manage hard links,

89
00:03:50,130 --> 00:03:51,963
as well as symbolic links yourself.

90
00:03:54,390 --> 00:03:59,390
Okay, I'm going to show
you ls -il on /etc/hosts.

91
00:04:00,270 --> 00:04:03,660
I'm using the -i because -i for ls

92
00:04:03,660 --> 00:04:05,957
is showing the inode number as well.

93
00:04:05,957 --> 00:04:09,000
And we can see the inode
number listed first.

94
00:04:09,000 --> 00:04:11,550
As you know, every file has a unique inode

95
00:04:11,550 --> 00:04:13,800
and having insight in these inodes

96
00:04:13,800 --> 00:04:16,020
is useful if you create links.

97
00:04:16,020 --> 00:04:20,100
So I'm using ln /etc/hosts to myhosts.

98
00:04:20,100 --> 00:04:24,120
And I'm using ls -il again,
now including myhosts.

99
00:04:24,120 --> 00:04:25,080
And what do we see?

100
00:04:25,080 --> 00:04:27,540
We see these files have the same inode

101
00:04:27,540 --> 00:04:29,550
and the same other properties.

102
00:04:29,550 --> 00:04:34,470
Now I'm using echo hello greater
than, greater than myhosts.

103
00:04:34,470 --> 00:04:36,090
And what do we see?

104
00:04:36,090 --> 00:04:39,256
Well, we see that they
still have the same inodes

105
00:04:39,256 --> 00:04:42,210
and both of them have become bigger.

106
00:04:42,210 --> 00:04:45,720
Both of them, relates to its two names,

107
00:04:45,720 --> 00:04:47,340
pointing to the same file.

108
00:04:47,340 --> 00:04:51,420
So you shouldn't even be
speaking about both of them.

109
00:04:51,420 --> 00:04:53,407
Now let me use ln -s myhosts

110
00:04:56,412 --> 00:04:57,245
to symhosts or whatever
you want to call it.

111
00:05:01,050 --> 00:05:04,860
Now, using again ls -il

112
00:05:04,860 --> 00:05:07,320
and I'm adding the symhosts,
and what do we see?

113
00:05:07,320 --> 00:05:10,290
We see the nature of the symhosts.

114
00:05:10,290 --> 00:05:11,280
Very dangerous.

115
00:05:11,280 --> 00:05:13,800
Symbolic links, by default,

116
00:05:13,800 --> 00:05:16,650
are pointing to a relative file name.

117
00:05:16,650 --> 00:05:17,790
This relative file name

118
00:05:17,790 --> 00:05:20,070
is really the contents
of the symbolic links.

119
00:05:20,070 --> 00:05:21,960
Look, we have seven characters here

120
00:05:21,960 --> 00:05:23,490
and it's not by coincidence

121
00:05:23,490 --> 00:05:26,400
that the symbolic link has seven bytes.

122
00:05:26,400 --> 00:05:29,610
That means that if you are going
to move your symbolic link,

123
00:05:29,610 --> 00:05:30,663
you'll be in trouble.

124
00:05:31,950 --> 00:05:34,260
Another thing that you
should see right here

125
00:05:34,260 --> 00:05:37,260
is that the symbolic link
has obtained its own inode.

126
00:05:37,260 --> 00:05:39,240
No permissions because the permissions

127
00:05:39,240 --> 00:05:40,863
are set in the target file.

128
00:05:41,741 --> 00:05:45,990
But I can use symhosts and symhosts

129
00:05:45,990 --> 00:05:50,070
will give me access to the
modified file whatsoever.

130
00:05:50,070 --> 00:05:52,110
Now, if I remove myhosts,

131
00:05:52,110 --> 00:05:53,730
then what is going to happen?

132
00:05:53,730 --> 00:05:55,330
Well, yes, I'm going to remove

133
00:05:57,240 --> 00:05:59,430
and I'm going to cat
my symhosts and oh no,

134
00:05:59,430 --> 00:06:01,290
no such file or directory.

135
00:06:01,290 --> 00:06:02,550
Does that make sense?

136
00:06:02,550 --> 00:06:06,720
It does because the symbolic
link has become invalid.

137
00:06:06,720 --> 00:06:10,050
It's pointing to a file
that doesn't exist anymore.

138
00:06:10,050 --> 00:06:12,330
Fortunately, it's very easy to recover

139
00:06:12,330 --> 00:06:14,070
the original situation.

140
00:06:14,070 --> 00:06:16,470
I just need to scroll up a little bit

141
00:06:16,470 --> 00:06:20,460
to find the original ln command.

142
00:06:20,460 --> 00:06:21,660
There we go.

143
00:06:21,660 --> 00:06:25,353
And now my symhosts should be valid again.

144
00:06:27,150 --> 00:06:29,430
As you can see, nothing is happening.

145
00:06:29,430 --> 00:06:31,980
So the symbolic link only checks

146
00:06:31,980 --> 00:06:36,980
to see if the target with
the name specified exists,

147
00:06:37,110 --> 00:06:40,110
and as long as that is the case,
the symbolic link is happy.
